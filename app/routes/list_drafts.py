from fastapi import APIRouter, Depends, HTTPException, Header, Query
from pydantic import BaseModel
from typing import Optional, List
from app.postgres import POSTGRES
import datetime
from uuid import UUID

router = APIRouter(tags=["List Drafts"])

class DraftResponse(BaseModel):
    draft_id: UUID
    email: str
    reply_text: str
    draft_text: str
    llm_generated_at: datetime.datetime

@router.get("/drafts", response_model=List[DraftResponse])
async def list_drafts(
    limit: int = Query(10, ge=1, le=50),
    x_api_key: str = Header(..., description="API Key for authentication")
):
    """
    List all LLM-generated outreach drafts pending approval.

    This endpoint returns a list of outreach reply drafts that have been generated by the LLM but not yet sent. 
    These drafts are stored with status `DRAFTED` and can be viewed, edited, or approved by the client.

    ### Query Parameters:
    - **limit** (`int`, optional, default=10): Maximum number of drafts to return. Must be between 1 and 50.

    ### Headers:
    - **x-api-key** (`str`, required): API Key used to authenticate the request.

    ### Response Model:
    A list of objects with the following fields:
    - **draft_id** (`UUID`): Unique identifier of the draft.
    - **email** (`str`): Recipient email address.
    - **reply_text** (`str`): Original text received from the contact.
    - **draft_text** (`str`): LLM-generated response to the contact.
    - **llm_generated_at** (`datetime`): Timestamp when the draft was created.

    ### Example Response:
    ```json
    [
    {
        "draft_id": "8f5e531c-e8e1-4216-b8fc-14a4072ff23e",
        "email": "someone@example.com",
        "reply_text": "Hey, I'm interested. Can you share more?",
        "draft_text": "Sure! Here's what we offer...",
        "llm_generated_at": "2025-08-07T12:34:56.789Z"
    },
    ...
    ]
    """
    rows = await POSTGRES.fetch_all("""
        SELECT pe.id AS draft_id, 
                oc.email, 
                pe.original_reply AS reply_text,
                pe.llm_draft as draft_text, 
                pe.created_at AS llm_generated_at
        FROM replies pe
        JOIN outreach_contacts oc ON oc.id = pe.contact_id
        WHERE pe.status = 'DRAFTED'
        ORDER BY pe.created_at ASC
        LIMIT $1
    """, (limit,))
    return [dict(row) for row in rows]

